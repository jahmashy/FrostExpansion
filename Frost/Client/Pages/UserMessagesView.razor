@page "/account/messages"
@using Newtonsoft.Json;
@using System.Security.Claims;
@using Microsoft.AspNetCore.SignalR.Client;
@layout UserAccountLayout
@inject AuthenticationStateProvider authStateProvider
@inject IJSRuntime JS
@inject NavigationManager navManager
@inject IStringLocalizer<Resource> localizer
@if (userChats.Count > 0)
{
    <div class="content-div">
        <CascadingValue Value="this">
            <CascadingValue Value="selectedChat.Id" Name="selectedChatId">
                <CascadingValue Value="myId" Name="myId">
                    <ChatList chatList="userChats"></ChatList>
                    <ChatBox elementToScrollId="@elementToScrollId" messages="selectedChat.messages"></ChatBox>
                    <ChatParticipantsList participants="selectedChat.participants"></ChatParticipantsList>
                </CascadingValue>
            </CascadingValue>
        </CascadingValue>
    </div>
}
else
{
    <h1>@localizer["NoChats"]</h1>
}
@code {
    [CascadingParameter]
    public UserAccountLayout layout { get; set; }

    public string elementToScrollId { get; set; } = "mes-div";

    public List<ChatPreviewDTO> userChats { get; set; } = new();

    public ChatPreviewDTO selectedChat { get; set; } = new();

    public string myId { get; set; }

    public CustomAuthenticationStateProvider customAuthStateProvider { get; set; }
    public AuthenticationState authState { get; set; }
    public ClaimsPrincipal? user { get; set; }


    private string hubUrl;
    private HubConnection hubConnection;

    protected override async Task OnInitializedAsync()
    {
        customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
        authState = await customAuthStateProvider.GetAuthenticationStateAsync();
        user = authState.User;
        myId = user.Claims.Where(c => c.Type == ClaimTypes.NameIdentifier).First().Value;
        layout.ChangeHeader("YourMessages");
        userChats = await InitializeChats();
        selectedChat = userChats.FirstOrDefault();
        string token = await customAuthStateProvider.GetToken();

        await EstablishChatConnection(token);
    }

    private async Task<List<ChatPreviewDTO>> InitializeChats()
    {
        using (HttpClient httpClient = new HttpClient())
        {
            var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
            var authState = await customAuthStateProvider.GetAuthenticationStateAsync();
            var token = await customAuthStateProvider.GetToken();
            httpClient.DefaultRequestHeaders.Add("Authorization", $"Bearer {token}");
            var myId = authState.User.Claims.Where(c => c.Type == ClaimTypes.NameIdentifier).FirstOrDefault().Value;
            string apiString = $"https://localhost:44350/api/chat/userChats/{myId}";
            var response = await httpClient.GetAsync(apiString);
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadAsStringAsync();
                var chats = JsonConvert.DeserializeObject<List<ChatPreviewDTO>>(result);
                return chats;
            }

            else
            {
                return new();
            }
        }
    }
    public void SelectChat(ChatPreviewDTO chat)
    {
        selectedChat = chat;
        this.StateHasChanged();
    }
    private async Task EstablishChatConnection(string token)
    {
        hubUrl = "https://localhost:44350/chat";
        hubConnection = new HubConnectionBuilder().WithUrl(hubUrl,
            options =>
            {
                options.AccessTokenProvider = () => Task.FromResult(token);
            })
        .Build();

        hubConnection.On<Message>("ReceiveMessage", ReceiveMessage);

        await hubConnection.StartAsync();
    }
    public async Task SendMessage(string message)
    {
        if (user.Identity is not null && user.Identity.IsAuthenticated)
        {
            await hubConnection.SendAsync("SendMessage", selectedChat.Id.ToString(), message);
        }
        else
        {
            await hubConnection.StopAsync();
            await hubConnection.DisposeAsync();
            await customAuthStateProvider.UpdateAuthenticationState(null);
        }   
    }
    public async void ReceiveMessage(Message newMessage)
    {
        if (user.Identity is not null && user.Identity.IsAuthenticated)
        {
            userChats.Where(c => c.Id == newMessage.chatroom_Id).First().messages.Add(newMessage);
            this.StateHasChanged();
            if (newMessage.chatroom_Id == selectedChat.Id)
                await JS.InvokeVoidAsync("ScrollToBottom", elementToScrollId);
        }
        else
        {
            await hubConnection.StopAsync();
            await hubConnection.DisposeAsync();
            await customAuthStateProvider.UpdateAuthenticationState(null);
        }
    }
}

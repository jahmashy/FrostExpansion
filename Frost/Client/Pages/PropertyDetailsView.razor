@inject IStringLocalizer<Resource> localizer
@inject NavigationManager navManager
@inject IJSRuntime JS
@inject AuthenticationStateProvider authStateProvider
@using Frost.Shared.Models.Enums;
@using Newtonsoft.Json;
@using System.Security.Claims;

@page "/propertydetails/{propertyOfferId}"
<h1>@localizer["OfferDetails"]</h1>
<div class="propertyDetails-wrapper">
    <div class="main-section">
        <PropertyDetailsImages propertyImagesUrls="propertyImagesUrls"></PropertyDetailsImages>
        <h3>@localizer["Description"]</h3>
        <p>@propertyOffer.Description</p>
    </div>
    <div class="info-section">
        <p>@localizer["Advertiser"]</p>
        <div class="userInfo-div">
            <img style="cursor:pointer" @onclick="@(()=>navManager.NavigateTo($"/user/{user.userId}"))" class="profileImg" src="@(string.IsNullOrEmpty(user.profileImgUrl)? "/images/Icons/ProfileImg.png" : user.profileImgUrl)" />
            <div>
                <h4 style="cursor:pointer" @onclick="@(()=>navManager.NavigateTo($"/user/{user.userId}"))">@user.name</h4>
                <div class="contact-info">
                    <span>@localizer["TelNumber"]: @user.telNumber</span>
                    <span>@localizer["Email"]: @user.email</span>
                </div>
            </div>
        </div>
        <div class="buttons-div">
            @if (!IsUserProperty)
            {
                <button @onclick="HandleSendMessage">@localizer["SendMessage"]</button>
                <span>
                    <button @onclick="HandleFollowClick"><img src=@(IsFollowed? "/images/Icons/Heart_Filled.png" : "/images/Icons/Heart_white.png") />@localizer[IsFollowed? "UnfollowOffer" : "FollowOffer"]</button>
                </span>
            }
            else
            {
                <button class="button-edit" @onclick="@(()=> navManager.NavigateTo($"/editOffer/{propertyOfferId}"))">@localizer["EditOffer"]</button>
                <button class="button-delete" @onclick="HandleDeleteClick">@localizer["DeleteOffer"]</button>
            }
            @if(role == "Admin")
            {
                <button class="button-delete" @onclick="HandleDeleteClick">@localizer["DeleteOffer"]</button>
            }
        </div>
        <div class="text-break"></div>
        <h3>
            @propertyOffer.Title
        </h3>
        <h4>
            @(propertyOffer.location?.cityName + (string.IsNullOrEmpty(propertyOffer.location?.districtName)? "" : (", " + propertyOffer.location.districtName)))
        </h4>
        <div class="properties-section">
            <ul>
                <li>@localizer["OfferType"]: <p>@localizer[propertyOffer.offerType.ToString()]</p></li>
                <li>@localizer["SurfaceArea"]: <p>@propertyOffer.Surface m²</p></li>
                <li>@localizer["RoomsNumber"]: <p>@propertyOffer.RoomsNumber</p></li>
                <li>@localizer["Floor"]: <p>@propertyOffer.Floor</p></li>
                @if(propertyOffer.marketType != MarketTypeEnum.Any)
                {
                    <li>@localizer["Market"]: <p>@localizer[propertyOffer.marketType.ToString()]</p></li>
                }
                <li>@localizer["ConstructionYear"]: <p>@propertyOffer.ConstructionYear</p></li>
                <li>@localizer["Price"]: <p>@propertyOffer.Price zł</p>
                    @if (propertyOffer.PercentageDiff != 0)
                    {
                        <span class="percentageDiff" style="@(propertyOffer.PriceLowerThanAverage? "color:green;" : "color:red;")">(@Math.Round(Math.Abs(propertyOffer.PercentageDiff),2) %)</span>
                    }
                </li>
            </ul>
            @if (propertyOffer.RoommatesAllowed)
            {
                <RoommatesList IsUserInRoommates="isUserInRoommates" OnRoommatesClick="HandleRoommates" roommatesList="propertyOffer.RoommatesList"></RoommatesList>
            }
        </div>
    </div>




</div>
@code {
    [CascadingParameter]
    public PopUpComponent popup { get; set; }
    [Parameter]
    public string propertyOfferId { get; set; }
    public PropertyDetailsDTO propertyOffer { get; set; } = new();
    public List<string> propertyImagesUrls { get; set; } = new();
    public UserDTO user { get; set; } = new();
    public bool IsFollowed { get; set; } = false;
    public bool IsUserProperty { get; set; } = false;
    public bool isUserInRoommates { get; set; } = false;
    private string role;

    protected override async Task OnInitializedAsync(){ 
        var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
        var authState = await customAuthStateProvider.GetAuthenticationStateAsync();
        var id = authState.User.Claims.Where(c => c.Type == ClaimTypes.NameIdentifier).FirstOrDefault()?.Value;
        role = authState.User.Claims.Where(c => c.Type == ClaimTypes.Role).FirstOrDefault()?.Value;
        await InitializePropertyDetailsAsync(propertyOfferId);
        if(id is not null)
        {
            using (HttpClient httpClient = new HttpClient())
            {
                var token = await customAuthStateProvider.GetToken();
                httpClient.DefaultRequestHeaders.Add("Authorization", $"Bearer {token}");
                string apiString = $"{navManager.BaseUri}api/property/{propertyOfferId}/viewcount";
                var response = await httpClient.PostAsJsonAsync<UserOfferModel>(apiString, new UserOfferModel() {userId = int.Parse(id), offerId = int.Parse(propertyOfferId)});

            }
        }

    }
    private async Task InitializePropertyDetailsAsync(string id)
    {
        using (HttpClient httpClient = new HttpClient())
        {
            var response = await httpClient.GetAsync($"{navManager.BaseUri}api/property/details?offerId={id}");
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadAsStringAsync();
                var data = JsonConvert.DeserializeObject<PropertyDetailsDTO>(result);
                propertyOffer = data;
                propertyImagesUrls = propertyOffer.propertyImagesUrls;
                user = propertyOffer.user;

                var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
                var authState = await customAuthStateProvider.GetAuthenticationStateAsync();
                string? myId = authState.User.Claims?.Where(c => c.Type == ClaimTypes.NameIdentifier).FirstOrDefault()?.Value;
                if (!string.IsNullOrEmpty(myId))
                {
                    var isUserProperty_response = await httpClient.GetAsync($"{navManager.BaseUri}api/property/IsUserProperty/{myId}/{propertyOffer.OfferId}");
                    if (isUserProperty_response.IsSuccessStatusCode)
                    {
                        var isUserProperty_result = await isUserProperty_response.Content.ReadAsStringAsync();
                        IsUserProperty = JsonConvert.DeserializeObject<bool>(isUserProperty_result);
                        if (!IsUserProperty)
                        {
                            var followedOffer_response = await httpClient.GetAsync($"{navManager.BaseUri}api/property/IsFollowed/{myId}/{propertyOffer.OfferId}");
                            if (followedOffer_response.IsSuccessStatusCode)
                            {
                                var followedOffer_result = await followedOffer_response.Content.ReadAsStringAsync();
                                IsFollowed = JsonConvert.DeserializeObject<bool>(followedOffer_result);
                            }
                        }
                        if (propertyOffer.RoommatesAllowed)
                        {
                            isUserInRoommates = propertyOffer.RoommatesList.Any(u=> u.userId == int.Parse(myId));
                        }
                    }

                }


            }else if (response.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                navManager.NavigateTo("/NotFound");
            }
            else
            {
                navManager.NavigateTo("/");
            }
        }
    }
    private async Task HandleFollowClick()
    {
        var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
        var authState = await customAuthStateProvider.GetAuthenticationStateAsync();
        string token = await customAuthStateProvider.GetToken();
        string? myId = authState.User.Claims?.Where(c => c.Type == ClaimTypes.NameIdentifier).FirstOrDefault()?.Value;
        if (string.IsNullOrEmpty(myId))
        {
            navManager.NavigateTo("/login");
            return;
        }

        using (HttpClient httpClient = new HttpClient())
        {
            httpClient.DefaultRequestHeaders.Add("Authorization", $"Bearer {token}");
            string apiString = IsFollowed ? $"{navManager.BaseUri}api/property/UnFollowOffer" : $"{navManager.BaseUri}api/property/FollowOffer";
            UserOfferModel model = new UserOfferModel
                {
                    userId = int.Parse(myId),
                    offerId = propertyOffer.OfferId
                };
            HttpResponseMessage response;
            if(IsFollowed){
                response = await httpClient.PostAsJsonAsync<UserOfferModel>(apiString, model);
            }else
            {
                response = await httpClient.PostAsJsonAsync<UserOfferModel>(apiString, model);
            }
            if (response.IsSuccessStatusCode)
            {
                var followedOffer_response = await httpClient.GetAsync($"{navManager.BaseUri}api/property/IsFollowed/{myId}/{propertyOffer.OfferId}");
                if (followedOffer_response.IsSuccessStatusCode)
                {
                    var followedOffer_result = await followedOffer_response.Content.ReadAsStringAsync();
                    IsFollowed = JsonConvert.DeserializeObject<bool>(followedOffer_result);
                }
            }
        }
    }
    private async void HandleSendMessage()
    {
        var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
        var authState = await customAuthStateProvider.GetAuthenticationStateAsync();
        string? myId = authState.User.Claims?.Where(c => c.Type == ClaimTypes.NameIdentifier).FirstOrDefault()?.Value;
        if (myId is null)
        {
            navManager.NavigateTo("/login");
            return;
        }

        using (HttpClient httpClient = new HttpClient())
        {
            var response = await httpClient.GetAsync($"{navManager.BaseUri}api/user/CommunicationStatus?userId={myId}&targetuserid={propertyOffer.user.userId}");
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadAsStringAsync();
                bool isCommunicationBlocked = JsonConvert.DeserializeObject<bool>(result);
                if (!isCommunicationBlocked)
                {
                    navManager.NavigateTo($"/account/messages?createChat=true&userId={propertyOffer.user.userId}");
                }
                else
                {
                    popup.InvokePopUp(localizer["CommunicationIsBlocked"]);
                }

            }
        }
    }
    private async void HandleDeleteClick()
    {
        var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
        var authState = await customAuthStateProvider.GetAuthenticationStateAsync();
        string? myId = authState.User.Claims?.Where(c => c.Type == ClaimTypes.NameIdentifier).FirstOrDefault()?.Value;
        if (string.IsNullOrEmpty(myId))
        {
            navManager.NavigateTo("/login");
            return;
        } 
        popup.InvokeConfirmPopUp(DeleteOffer, localizer["ConfirmDelete"]);
    }
    private async void DeleteOffer()
    {
        using (HttpClient httpClient = new HttpClient())
        {
            var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
            var authState = await customAuthStateProvider.GetAuthenticationStateAsync();
            var token = await customAuthStateProvider.GetToken();
            httpClient.DefaultRequestHeaders.Add("Authorization", $"Bearer {token}");
            string apiString = $"{navManager.BaseUri}api/property/{propertyOffer.OfferId}";
            var response = await httpClient.DeleteAsync(apiString);
            navManager.NavigateTo(navManager.BaseUri, forceLoad: true);
        }
    }
    private async void HandleRoommates()
    {
        var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
        var authState = await customAuthStateProvider.GetAuthenticationStateAsync();
        string? myId = authState.User.Claims?.Where(c => c.Type == ClaimTypes.NameIdentifier).FirstOrDefault()?.Value;
        if (myId is null)
        {
            navManager.NavigateTo("/login");
            return;
        }
        UserOfferModel model = new UserOfferModel()
        {
            userId = int.Parse(myId),
            offerId = int.Parse(propertyOfferId)
        };
        using (HttpClient httpClient = new HttpClient())
        {
            var token = await customAuthStateProvider.GetToken();
            httpClient.DefaultRequestHeaders.Add("Authorization", $"Bearer {token}");
            if (!isUserInRoommates)
            {
                var response = await httpClient.PostAsJsonAsync<UserOfferModel>($"{navManager.BaseUri}api/property/{propertyOfferId}/Roommates", model);
                if (response.IsSuccessStatusCode)
                {
                    await InitializePropertyDetailsAsync(propertyOfferId);
                    this.StateHasChanged();
                }
            }
            else
            {
                var response = await httpClient.DeleteAsync($"{navManager.BaseUri}api/property/{propertyOfferId}/Roommates/{myId}");
                if (response.IsSuccessStatusCode)
                {
                    await InitializePropertyDetailsAsync(propertyOfferId);
                    this.StateHasChanged();
                }
            }
            
        }
    }
}

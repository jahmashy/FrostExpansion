@using System.Text.RegularExpressions;
@inject IJSRuntime JS
@inject NavigationManager navManager

<div class="chatBox-div">
    <div id="@elementToScrollId" class="messages-div">
        @foreach (var message in messages)
        {
            <div class="message-div @(string.Equals(myId,message.user_Id.ToString())? "myMessage" : "otherMessage")">
                @if (!string.Equals(myId, message.user_Id.ToString()))
                {
                    <span style="font-weight: 600;">@message.userName</span>
                }
                <div class="message-box">
                    @SearchMessageForLinks(message.content)
                </div>
            </div>
        }
    </div>
    <div class="inputMessage-div">
        <textarea id="messageInput" rows="2"
                  @bind="messageContent"
                  @oninput="(e) => HandleInput(e.Value.ToString())"
                  @onkeypress="@((e) => HandleSend(e))">
        </textarea>
        <img @onclick="HandleSend" src="/images/Icons/ForwardArrowBlue.png" />
    </div>
</div>


@code {
    [Parameter]
    public List<MessageModel> messages { get; set; } = new();

    [Parameter]
    public string elementToScrollId { get; set; }

    [CascadingParameter(Name="myId")]
    public string myId { get; set; }

    [CascadingParameter]
    public UserMessagesView mainPage { get; set; }

    [Parameter]
    public string messageContent { get; set; }

    [Parameter]
    public EventCallback<string> OnMessageContentChange { get; set; }

    [Parameter]
    public EventCallback<string> OnInvitationClick { get; set; }


    public int maxMessageLength { get; set; } = 4096;



    private async void HandleSend(KeyboardEventArgs e)
    {
        if (string.Equals(e.Key, "Enter") && !e.ShiftKey && !string.IsNullOrEmpty(messageContent))
        {
            await mainPage.SendMessageAsync(messageContent);
            await OnMessageContentChange.InvokeAsync(string.Empty);
        }

    }
    private async void HandleSend()
    {
        if (!string.IsNullOrEmpty(messageContent))
        {
            await mainPage.SendMessageAsync(messageContent);
            await OnMessageContentChange.InvokeAsync(string.Empty);
        }
    }
    private async void HandleInput(string newValue)
    {
        if (string.IsNullOrWhiteSpace(messageContent) && newValue.EndsWith('\n'))
        {
            await JS.InvokeVoidAsync("SetValue", "messageInput", string.Empty);
            await OnMessageContentChange.InvokeAsync(string.Empty);
        }
        else if ((messageContent.EndsWith('\n') && newValue.EndsWith('\n')) || newValue.Length > maxMessageLength)
        {
            await JS.InvokeVoidAsync("SetValue", "messageInput", messageContent);
            await OnMessageContentChange.InvokeAsync(messageContent);
        }
        else
        {
            await OnMessageContentChange.InvokeAsync(newValue);
        }
    }
    protected override void OnParametersSet()
    {
        foreach(var message in messages)
        {
            SearchMessageForLinks(message.content);
        }

    }
    protected override async Task OnAfterRenderAsync(bool firstrender)
    {
        await JS.InvokeVoidAsync("ScrollToBottom", elementToScrollId);
    }
    private RenderFragment SearchMessageForLinks(string message)
    {
        RenderFragment fragment = builder =>
        {

        }; 
        string baseurl = navManager.BaseUri;
        baseurl = baseurl.Replace("/", "\\/");
        string api = "api/chat/invitation/";
        api = api.Replace("/", "\\/");
        var sb = new System.Text.StringBuilder();
        sb.Append("(");
        sb.Append(baseurl);
        sb.Append(api);
        sb.Append(".{36})+");
        string pattern = sb.ToString();

        string[] strings = Regex.Split(message, pattern);
        foreach (string stringPart in strings)
        {
            Match m = Regex.Match(stringPart, pattern);
            if (m.Success)
            {
                fragment +=@<a @onclick="@(async ()=>{OnInvitationClick.InvokeAsync(m.Value);})" class="invitation">@m.Value</a>;
            }
            else
            {
                fragment +=@<span>@stringPart</span>;
            }
        }

        return fragment;

    }
}

@using Frost.Shared.Models.Enums;
@using System.Net.Http.Headers;
@using Newtonsoft.Json;
@using System.Security.Claims;
@using System.Text;
@using Frost.Shared.Models.Forms;
@inject IStringLocalizer<Resource> localizer
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navManager

<div class="offerForm-div">
    <EditForm EditContext="editContext" OnSubmit="HandleSubmitAsync">
        <DataAnnotationsValidator />
         
        <div class="input-group">
            <div>
                <label>@localizer["Title"]</label>
                <div class="input-div">
                    <InputText @bind-Value=propertyForm.Title placeholder="@localizer["RequiredField"]"></InputText>
                </div>
                <div class="errorMsg-div">
                    <ValidationMessage For="@(() => propertyForm.Title)" />
                </div>
            </div>
            <div>
                <label>@localizer["Price"]</label>
                <div class="input-div">
                    <InputNumber @bind-Value=propertyForm.Price placeholder="@localizer["RequiredField"]"></InputNumber>
                    <span>zł</span>
                </div>
                <div class="errorMsg-div">
                    <ValidationMessage For="@(() => propertyForm.Price)" />
                </div>
            </div>
            <div>
                <label>@localizer["SurfaceArea"]</label>
                
                <div class="input-div">
                    <InputNumber @bind-Value=propertyForm.Surface placeholder="@localizer["RequiredField"]"></InputNumber>
                    <span>m²</span>
                </div>
                <div class="errorMsg-div">
                    <ValidationMessage For="@(() => propertyForm.Surface)" />
                </div>
            </div>
            <div>
                <label>@localizer["Location"]</label>
                <LocationSearch userInput="@propertyForm.location.cityName" isValid="isCityValid" OnUserInput="OnCitySearchInput" OnLocationChange="ChooseCity"></LocationSearch>
                <div class="errorMsg-div">
                    @foreach (var error in CityErrors)
                    {
                        <div class="validation-message">@error</div>
                    }
                </div>
            </div>
            <div>
                <label>@localizer["District"]</label>

                <SublocalitySearch userInput="@propertyForm.location.districtName" isValid="isDistrictValid" selectedCity="@propertyForm.location.cityName" OnLocationChange="ChooseDistrict" OnUserInput="OnDistrictSearchInput"></SublocalitySearch>
                <div class="errorMsg-div">
                    @foreach (var error in DistrictErrors)
                    {
                        <div class="validation-message">@error</div>
                    }
                </div>
            </div>
            <div>
                <label>@localizer["PropertyType"]</label>
                <div class="input-div">
                    <InputSelect @bind-Value="propertyForm.propertyType">
                        @foreach (var pType in Enum.GetValues(typeof(PropertyTypeEnum)))
                        {
                            <option value="@pType">@localizer[pType.ToString()]</option>
                        }
                    </InputSelect>
                </div>
                <div class="errorMsg-div">
                    <ValidationMessage For="@(() => propertyForm.propertyType)" />
                </div>
            </div>
            <div>
                <label>@localizer["OfferType"]</label>
                <InputSelect @bind-Value="propertyForm.offerType">
                    @foreach (var pType in Enum.GetValues(typeof(OfferTypeEnum)))
                    {
                        <option value="@pType">@localizer[pType.ToString()]</option>
                    }
                </InputSelect>
                <div class="errorMsg-div">
                    <ValidationMessage For="@(() => propertyForm.offerType)" />
                </div>
            </div>
            <div>
                <label>@localizer["Market"]</label>

                <InputSelect @bind-Value="propertyForm.marketType">
                    @foreach (var pType in Enum.GetValues(typeof(MarketTypeEnum)))
                    {
                        <option value="@pType">@localizer[pType.ToString()]</option>
                    }
                </InputSelect>
                <div class="errorMsg-div">
                    <ValidationMessage For="@(() => propertyForm.marketType)" />
                </div>
            </div>
            <div>
                <label>@localizer["RoomsNumber"]</label>

                <div class="input-div">
                    <InputNumber @bind-Value=propertyForm.RoomsNumber placeholder="@localizer["RequiredField"]"></InputNumber>
                </div>
                <div class="errorMsg-div">
                    <ValidationMessage For="@(() => propertyForm.RoomsNumber)" />
                </div>
            </div>
            <div>
                <label>@localizer["Floor"]</label>

                <div class="input-div">
                    <InputNumber @bind-Value=propertyForm.Floor placeholder="@localizer["RequiredField"]"></InputNumber>
                </div>
                <div class="errorMsg-div">
                    <ValidationMessage For="@(() => propertyForm.Floor)" />
                </div>
            </div>
            <div>
                <label>@localizer["ConstructionYear"]</label>

                <div class="input-div">
                    <InputNumber @bind-Value=propertyForm.ConstructionYear placeholder="@localizer["RequiredField"]"></InputNumber>
                </div>
                <div class="errorMsg-div">
                    <ValidationMessage For="@(() => propertyForm.ConstructionYear)" />
                </div>
            </div>
        </div>
        @if (editForm)
        {
            <div class="changeImg-div" @onclick = "@(()=> isImageSectionVisible = !isImageSectionVisible)">
                @if (!isImageSectionVisible)
                {
                    <img src="/images/Icons/Plus.png" />
                    <a>@localizer["ClickToReplacePhotos"]</a>
                }
                else
                {
                    <img src="/images/Icons/Minus.png" />
                    <a>@localizer["CancelReplacingPhotos"]</a>
                }
            </div>
        }
        <div style="display:@(isImageSectionVisible? "block" : "none")">
            <div style="display:flex;flex-direction:row;">
                <InputFileComponent AddError="AddImgError" selectedFiles="selectedFiles" errors="imageErrors"></InputFileComponent>
                <div class="requirements-div">
                    <p>@localizer["ImagesRequirements"]</p>
                    <ul>
                        <li>@localizer["ImagesAmountRequirement"]</li>
                        <li>@localizer["ImagesSizeRequirement"]</li>
                        <li>@localizer["ImagesExtensionRequirement"]</li>
                    </ul>
                    <div class="errorMsg-div">
                        @foreach (var error in imageErrors)
                        {
                            <div class="validation-message imageErrors">@error</div>
                        }
                    </div>
                </div>
            </div>
        </div>
        @if (propertyForm.offerType.Equals(OfferTypeEnum.Rent))
        {
            <div class="checkbox-div">
                <InputCheckbox @bind-Value=propertyForm.RoommatesAllowed></InputCheckbox>
                <p>@localizer["AllowRoommates"]</p>
            </div>
        }
        <div class="description-section">
            <label>@localizer["Description"]</label>
            <InputTextArea @bind-Value=propertyForm.Description></InputTextArea>
            <div class="errorMsg-div">
                <ValidationMessage For="@(() => propertyForm.Description)" />
            </div>
        </div>
        <div>
            <button type="submit" style="grid-area:button">@(editForm? @localizer["SaveChanges"] : @localizer["AddOffer"])</button>
        </div> 
    </EditForm>
</div>




@code {
    [Parameter]
    public bool editForm { get; set; } = false;
    [Parameter]
    public bool editTemplate { get; set; } = false;
    [Parameter]
    public string offerId { get; set; }
    [Parameter]
    public PropertyFormModel propertyForm { get; set; }

    public long maxFileSize = 1024 * 1024 * 5;
    public int minRequiredFiles = 6;
    public int maxRequiredFiles = 15;

    public List<IBrowserFile> selectedFiles = new();

    public List<string> imageErrors { get; set; } = new();

    public List<string> CityErrors { get; set; } = new();
    public bool isCityValid = true;
    public string cityUserInput { get; set; } = "";

    public List<string> DistrictErrors { get; set; } = new();
    public bool isDistrictValid = true;
    public string districtUserInput { get; set; } = "";

    private EditContext editContext;
    public bool isImageSectionVisible { get; set; } = true;

    protected override void OnInitialized()
    {
        if(propertyForm is null)
            propertyForm = new();
        editContext = new EditContext(propertyForm);
        if (editForm)
            isImageSectionVisible = false;
        if(propertyForm.location is null)
            propertyForm.location = new();

    }
    protected override void OnParametersSet()
    {
        if (editForm)
        {
            cityUserInput = propertyForm.location.cityName;
            districtUserInput = propertyForm.location.districtName;
            editContext = new EditContext(propertyForm);
        }

    }
    public bool addPropertySuccess { get; set; } = false;
    private async Task HandleSubmitAsync()
    {
        CityErrors.Clear();
        isCityValid = true;

        DistrictErrors.Clear();
        isDistrictValid = true;

        imageErrors.Clear();
        bool isFormValid = editContext.Validate();
        bool handleImages = !editForm || (editForm && isImageSectionVisible);
        if (handleImages)
        {
            if (selectedFiles.Count < minRequiredFiles)
            {
                imageErrors.Clear();
                imageErrors.Add(localizer["NotEnoughFilesError"] + $" {minRequiredFiles} " + localizer["NotEnoughFilesError_files"]);
                isFormValid = false;
            }
            if (selectedFiles.Count > maxRequiredFiles)
            {
                imageErrors.Clear();
                imageErrors.Add(localizer["TooManyFilesError"]);
                isFormValid = false;
            }
        }
        if (String.IsNullOrWhiteSpace(propertyForm.location.cityPlaceId) || !cityUserInput.Equals(propertyForm.location.cityName))
        {
            CityErrors.Clear();
            CityErrors.Add(localizer["LocationNotChosenError"]);
            isFormValid = false;
            isCityValid = false;
        }
        if (!String.IsNullOrWhiteSpace(propertyForm.location.districtPlaceId) && !districtUserInput.Equals(propertyForm.location.districtName))
        {
            DistrictErrors.Clear();
            DistrictErrors.Add(localizer["DistrictNotChosenError"]);
            isFormValid = false;
            isDistrictValid = false;
        }
        if (isFormValid)
        {
            using (MultipartFormDataContent content = new())
            {
                if (handleImages)
                    PrepareFiles(content);
                var stringPayload = JsonConvert.SerializeObject(propertyForm);
                var httpContent = new StringContent(stringPayload, Encoding.UTF8, "application/json");
                content.Add(
                    content: httpContent,
                    name: "newProperty");
                using (HttpClient httpClient = new HttpClient())
                {
                    var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
                    var authState = await customAuthStateProvider.GetAuthenticationStateAsync();
                    var email = authState.User.Claims.Where(c => c.Type == ClaimTypes.Email).First().Value;
                    var token = await customAuthStateProvider.GetToken();
                    httpClient.DefaultRequestHeaders.Add("Authorization", $"Bearer {token}");
                    if (!editForm)
                    {
                        var response = await httpClient.PostAsync($"{navManager.BaseUri}api/property", content);
                        if (response.IsSuccessStatusCode)
                        {
                            var result = await response.Content.ReadAsStringAsync();
                            int propertyId = JsonConvert.DeserializeObject<int>(result);
                            navManager.NavigateTo($"/propertydetails/{propertyId}");
                        }
                    }
                    else
                    {
                        var response = await httpClient.PutAsync($"{navManager.BaseUri}api/property/{offerId}", content);
                        if (response.IsSuccessStatusCode)
                        {
                            if (editTemplate)
                            {
                                navManager.NavigateTo("/account/offers/yourtemplates");
                            }
                            else
                            {
                                navManager.NavigateTo($"/propertydetails/{offerId}");
                            }
                        }
                    }

                }
            }
        }
        else
        {
            return;
        }
    }

    private void PrepareFiles(MultipartFormDataContent content)
    {
        foreach(var file in selectedFiles)
        {
            string newFileName = Path.ChangeExtension(Path.GetRandomFileName(), ".webp");
            var fileContent = new StreamContent(file.OpenReadStream(maxFileSize));
            fileContent.Headers.ContentType = new MediaTypeHeaderValue(file.ContentType);
            content.Add(
                content: fileContent,
                name: "\"files\"",
                fileName: newFileName);
        }
    }
    public void ChooseCity(Location predictedLocation)
    {
        propertyForm.location.cityName = predictedLocation.cityName;
        propertyForm.location.cityPlaceId = predictedLocation.cityPlaceId;
        cityUserInput = predictedLocation.cityName;
        CityErrors.Clear();
        isCityValid = true;

        propertyForm.location.districtName = "";
        propertyForm.location.districtPlaceId = "";
        districtUserInput = "";
    }
    public void OnCitySearchInput(string userInput)
    {
        cityUserInput = userInput;
    }
    public void ChooseDistrict(Location predictedLocation)
    {
        propertyForm.location.districtName = predictedLocation.districtName;
        propertyForm.location.districtPlaceId = predictedLocation.districtPlaceId;
        isDistrictValid = true;
        DistrictErrors.Clear();
        districtUserInput = predictedLocation.districtName;
    }
    public void OnDistrictSearchInput(string userInput)
    {
        districtUserInput = userInput;
    }
    public void AddImgError(string error)
    {
        imageErrors.Add(error);
    }
}

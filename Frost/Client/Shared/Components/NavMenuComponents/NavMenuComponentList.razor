@using System.Reflection;
@inject IStringLocalizer<Resource> localizer
@inject IJSRuntime JS
@implements IDisposable
@inject NavigationManager NavManager
<div id="@id" class="componentList-div" style="visibility: @(isVisible? "visible" : "collapse")">
    <ul>
        @foreach (var value in values)
        {
            <li @onclick="@(()=>NavManager.NavigateTo($"property/search/" + value.Substring(0,value.Length - 1) + $"/{offerType}?&pageNumber=1",forceLoad:true))">
                <a>@localizer[value]</a>
            </li>
        }
    </ul>
</div>


@code {
    [Parameter]
    public string id { get; set; }
    [Parameter]
    public List<string> values { get; set; }
    [Parameter]
    public bool isVisible { get; set; }
    [Parameter]
    public EventCallback<bool> OnVisibilityChange { get; set; }
    [Parameter]
    public string offerType { get; set; }

    private DotNetObjectReference<NavMenuComponentList> objRef;
    protected override void OnInitialized()
    {
        objRef = DotNetObjectReference.Create(this);

    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("addDocumentClickListener",objRef,id);
        }
    }
    [JSInvokable]
    public void ToggleDropdownVisibility(bool visibility)
   {
        isVisible = visibility;
        OnVisibilityChange.InvokeAsync(isVisible);
        this.StateHasChanged();
    }
    public void Dispose()
    {
        objRef?.Dispose();
    }
}

@using Newtonsoft.Json;
@using System.Security.Claims;
@inject NavigationManager navManager
@inject IStringLocalizer<Resource> localizer
@inject AuthenticationStateProvider authStateProvider
<div class="list-Wrapper">
    <div class="top-div">
        <p>@localizer["RoommateSearch"]</p>
        <img @onclick="@(async()=>await OnRoommatesClick.InvokeAsync())" src="@(IsUserInRoommates? "/images/Icons/Minus.png" : "/images/Icons/Plus.png")"  />
    </div>
    
    <ul>
        @foreach (var user in roommatesList)
        {
            <li>
                <div class="listElement-div">
                    <img style="cursor:pointer" @onclick="@(()=>navManager.NavigateTo($"/user/{user.userId}"))" src="@(string.IsNullOrEmpty(user.profileImgUrl)? "/images/Icons/ProfileImgList.png" : user.profileImgUrl)" />
                    <p style="cursor:pointer" @onclick="@(()=>navManager.NavigateTo($"/user/{user.userId}"))">@user.name</p>
                    <img @onclick="@(()=>HandleSendMessage(user.userId))" src="/images/Icons/Message.png" />
                </div>
            </li>
        }
    </ul>
</div>


@code {
    [Parameter]
    public List<UserDTO> roommatesList { get; set; }
    [CascadingParameter]
    public PopUpComponent popup { get; set; }
    [Parameter]
    public EventCallback OnRoommatesClick { get; set; }
    [Parameter]
    public bool IsUserInRoommates { get; set; } = false;
    private async void HandleSendMessage(int userId)
    {
        var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
        var authState = await customAuthStateProvider.GetAuthenticationStateAsync();
        string? myId = authState.User.Claims?.Where(c => c.Type == ClaimTypes.NameIdentifier).FirstOrDefault()?.Value;
        if (myId is null)
        {
            navManager.NavigateTo("/login");
            return;
        }

        using (HttpClient httpClient = new HttpClient())
        {
            var response = await httpClient.GetAsync($"{navManager.BaseUri}api/user/CommunicationStatus?userId={myId}&targetuserid={userId}");
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadAsStringAsync();
                bool isCommunicationBlocked = JsonConvert.DeserializeObject<bool>(result);
                if (!isCommunicationBlocked)
                {
                    navManager.NavigateTo($"/account/messages?createChat=true&userId={userId}");
                }
                else
                {
                    popup.InvokePopUp(localizer["CommunicationIsBlocked"]);
                }

            }
        }
    }
}
